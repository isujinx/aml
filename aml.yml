version: "3.8"

# The base of this compose file comes from the individual compose files posted at: https://drfrankenstein.co.uk/  with some minor changes
# The addition of the reencoding idea came from: https://www.youtube.com/watch?v=NA_sO3rH2mU

# I have added comments in this compose file for ease of use, and started to make use of the .env file

services:
      
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN  # required to perform network ops - https://man7.org/linux/man-pages/man7/capabilities.7.html
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
      - 8112:8112 # port for deluge
      - 6789:6789 # port for NZBGet
      # If you use more download clients, you will need to add those portmappings here
    volumes:
      - /volume1/docker/gluetun:/gluetun
    environment:
      VPN_SERVICE_PROVIDER: ${VPN_SERVICE_PROVIDER}
      VPN_TYPE: ${VPN_TYPE}
      OPENVPN_USER: ${OPENVPN_USER}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
      SERVER_COUNTRIES: ${SERVER_COUNTRIES}
      TZ: ${TIMEZONE}
      HTTPPROXY: "on" #change to off if you don't wish to enable
      SHADOWSOCKS: "on" #change to off if you don't wish to enable
    networks: 
       - aml_bridge
    healthcheck:
       retries: 3  #I found that the normal 1-try healthcheck didn't give enough time for the gluetun container to boot and establish the VPN connection
    restart: unless-stopped
    
  deluge:
    image: linuxserver/deluge
    container_name: deluge
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
      - DELUGE_LOGLEVEL=error #optional
    volumes:
      - /volume1/docker/deluge:/config
      - /volume1/data/torrents:/data/torrents
    network_mode: service:gluetun # run on the vpn network
    depends_on:
      gluetun:
         condition: service_healthy  #updated the Dr.Frankenstein code to use service_healthy condition instead of the default container started
    restart: unless-stopped

  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/docker/nzbget:/config
      - /volume1/data/usenet:/data/usenet
    network_mode: service:gluetun # run on the vpn network
    depends_on:
      gluetun:
         condition: service_healthy  #updated the Dr.Frankenstein code to use service_healthy condition instead of the default container started
    restart: unless-stopped
    
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/docker/sonarr:/config
      - /volume1/data:/data
    ports:
      - 8989:8989
    networks: 
    - aml_bridge
    restart: unless-stopped
    
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/docker/radarr:/config
      - /volume1/data:/data
    ports:
      - 7878:7878
    networks: 
    - aml_bridge
    restart: unless-stopped
    
  readarr:
    image: linuxserver/readarr:develop  #Readarr currently only offers a developer release, so "latest" isnt an option
    container_name: readarr
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/docker/readarr/:/config
      - /volume1/data/:/data
    ports:
      - 8787:8787
    networks: 
    - aml_bridge
    restart: unless-stopped
    
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/data:/data
      - /volume1/docker/lidarr:/config
    ports:
      - 8686:8686
    networks: 
    - aml_bridge
    restart: unless-stopped
    
  tdarr:   #Tdarr can run multiple nodes, this is the server, which also contains an internal node for processing.  If you need additional nodes, use the template below
    container_name: tdarr
    image: ghcr.io/haveagitgat/tdarr:latest  # from https://docs.tdarr.io/docs/installation/docker/run-compose
    restart: unless-stopped
    networks: 
    - aml_bridge
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
      - 8267:8267 # Internal node port
      - 8268:8268 # Example extra node port
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
      - UMASK_SET=002
      - serverIP=${NAS_IP}
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - nodeID=MyInternalNode
    volumes:
      - /volume1/docker/tdarr/server:/app/server
      - /volume1/docker/tdarr/configs:/app/configs
      - /volume1/docker/tdarr/logs:/app/logs
      - /volume1/data/media:/media
      - /volume1/data/transcode_cache:/temp

  tdarr-node:  #Tdarr additional worker node - read up on how to use GPU encoding vs CPU... 
    container_name: tdarr-node
    image: ghcr.io/haveagitgat/tdarr_node:latest  #from https://docs.tdarr.io/docs/installation/docker/run-compose
    restart: unless-stopped
    network_mode: service:tdarr
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
      - UMASK_SET=002
      - nodeID=MainNode
      - serverIP=${NAS_IP}
      - serverPort=8266
    volumes:
      - /volume1/docker/tdarr/configs:/app/configs
      - /volume1/docker/tdarr/logs:/app/logs
      - /volume1/data/media:/media
      - /volume1/data/transcode_cache:/temp
      
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
    volumes:
      - /volume1/docker/heimdall:/config
    networks: 
      - aml_bridge  
    ports:
      - 8080:80
      - 8443:443
    restart: unless-stopped

  jellyfin:
    image: linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${DOCKERPUID}
      - PGID=${DOCKERPGID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=${NAS_IP} #optional
    volumes:
      - /volume1/docker/jellyfin:/config
      - /volume1/data/media:/data/media
    ports:
      - 8096:8096 #http webui port
      - 8920:8920 #https webui port (optional)
      - 7359:7359/udp #Allow local network discovery (optional)
      #- 1900:1900/udp #Allow DLNA Service discovery (optional - only used for hardware transcoding? I think?)
    networks:
      - aml_bridge
    restart: unless-stopped
    
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
     - LOG_LEVEL=debug
     - PUID=${DOCKERPUID}
     - PGID=${DOCKERPGID}
     - TZ=${TIMEZONE}
    ports:
     - 5055:5055
    volumes:
     - /volume1/docker/jellyseer:/app/config
    networks:
     - aml_bridge
    restart: unless-stopped    

    
networks:
  aml_bridge:
     name: aml_bridge
  
